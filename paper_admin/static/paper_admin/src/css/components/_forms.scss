@import "../app";


.invalid-feedback {
  li:before {
    content: '- ';
  }
}

.invalid {
  .invalid-feedback,
  .invalid-tooltip {
    display: block;
  }

  .form-control,
  .custom-select,
  .custom-file-label {
    border-color: $danger;
  }
}


.form-label {
  margin-top: -0.375rem;
  margin-bottom: 0.375rem;
  font-size: $font-size-base;
  font-weight: $form-label-font-weight;
  @include media-breakpoint-up(md) {
    margin-top: 0;
    margin-bottom: 0;
  }

  label {
    cursor: pointer;
    color: $form-label-color;

    .required &:after {
      content: '*';
      position: relative;
      margin-left: .125em;
      top: -0.2em;
      color: $danger;
    }

    &.form-check-label {
      color: $body-color;
      font-size: $font-size-base;
      line-height: $line-height-base;
    }
  }
}

.form-control {
  display: inline-block;
  vertical-align: top;
}

.related-links {
  margin: 0.5rem #{-$tool-item-margin-y} 0 #{-$tool-item-margin-y};
  @media (max-width: 479px) {
    display: block;
  }

  select + &,
  .select2 + & {
    @media (min-width: 480px) {
      margin-top: 0.3125rem;
      margin-left: 0.375rem;
    }
  }
}

.readonly-content {
  word-break: break-word;
}

.vHelpIcon {
  padding: 2px;
  margin-left: 6px;
  cursor: pointer;
  color: theme-color('info');
  opacity: 0.66;
  transition: opacity 0.4s;

  &:hover {
    opacity: 1;
  }
}


/**
 *  Fields
 */

.input-group {
  width: auto;

  button:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  .input-group-text {
    color: $input-group-addon-color;
    text-decoration: none;
  }

  button.input-group-text:hover,
  a.input-group-text:hover {
    color: $primary;
  }

  a:not([href]).input-group-text {
    color: $input-group-addon-color;
  }
}

.vDateField {
  display: inline-flex;
  width: $form-date-width;
  min-width: #{$form-date-width - 2 * $form-hspace};
  max-width: calc(100% - #{$form-time-width + $form-hspace});

  & ~ .vTimePicker {
    margin-left: $form-hspace;
  }
}

.vTimePicker {
  width: $form-time-width;
}

.vSmallField {
  max-width: 100%;
  @media (min-width: 400px) {
    width: $form-field-width;
  }
}

.vSelect {
  max-width: 100%;
  @media (min-width: 400px) {
    width: auto;
    min-width: $form-field-width;
  }
}

.vSelectDate {
  display: flex;

  & > .vSelect {
    min-width: 0;

    &:nth-child(1) {
      width: $form-month-width;
    }

    &:nth-child(2) {
      width: $form-day-width;
    }

    &:nth-child(3) {
      width: $form-year-width;
    }

    &:not(:last-child) {
      margin-right: $form-hspace;
    }
  }
}

.vClearableFileField {
  .js & input[type="file"] {
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
  }

  .current-value {
    margin-right: 2em;
  }

  .form-check {
    display: inline-block;
  }

  input[type="file"] + label {
    position: relative;
    max-width: 100%;

    .no-js & {
      display: none;
    }

    i {
      position: absolute;
      top: 0.375rem;
      left: $btn-padding-x-sm;
    }

    span {
      display: inline-block;
      overflow: hidden;
      margin-left: 0.75rem;
      max-width: calc(100% - 0.75rem);
      white-space: nowrap;
      text-overflow: ellipsis;
      vertical-align: top;
    }

    * {
      pointer-events: none;
    }
  }

  input[type="file"].focused + label,
  input[type="file"]:focus + label {
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $input-focus-box-shadow;
    } @else {
      box-shadow: $input-focus-box-shadow;
    }
  }
}

.vCustomCheckbox,
.vCustomRadio {
  display: inline-block;
  position: relative;
  user-select: none;
  cursor: pointer;
  vertical-align: middle;

  input {
    position: absolute;
    opacity: 0.001;
    z-index: -1;
  }

  .indicator {
    position: relative;
    margin-top: #{($line-height-base - (1rem / $font-size-base)) / 2}em;
    width: 1rem;
    height: 1rem;
    cursor: pointer;
    flex: 0 0 auto;
    background: $input-bg;
    border: $input-border-width solid $input-border-color;

    &:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      background-color: $primary;
      background-clip: content-box;
      border: 2px solid transparent;
      border-radius: inherit;
      transition: opacity 0.15s;
      will-change: opacity;
    }
  }

  .label {
    flex: 1 0 0;
    padding-left: 0.25rem;
    &:empty {
      display: none;
    }
  }

  &:hover .indicator:before {
    opacity: 0.25;
  }

  input:focus + .d-flex .indicator {
    box-shadow: 0 0 0 0.1rem $input-btn-focus-color;
  }

  input:checked + .d-flex .indicator {
    border-color: $primary;

    &:before {
      opacity: 1;
    }
  }

  input:disabled + .d-flex .indicator {
    cursor: default;
    background-color: $input-disabled-bg;
    border-color: rgba($input-border-color, 0.5);

    &:before {
      opacity: 0;
    }
  }

  input:disabled:checked + .d-flex .indicator {
    &:before {
      opacity: 0.5;
    }
  }

  @each $color, $value in $theme-colors {
    input.#{$color} + .d-flex .indicator {
      &:before {
        background-color: $value;
      }
    }

    input.#{$color}:checked + .d-flex .indicator {
      border-color: $value;
    }
  }
}

.vCustomCheckbox {
  .indicator {
    border-radius: $border-radius;

    &:after {
      content: $fa-var-check;
      position: absolute;
      top: 50%;
      left: 50%;
      color: white;
      line-height: 1;
      font-size: 0.875em;
      font-family: FontAwesome, sans-serif;
      transform: translate(-50%, -50%) scale(0);
      transition: transform 0.15s;
      will-change: transform;
    }
  }
}

.vCustomRadio {
  .indicator {
    width: 0.875rem;
    height: 0.875rem;
    border-radius: 50%;
  }
}
