@import "css/env";

.invalid-feedback {
  li:before {
    content: '- ';
  }
}

.invalid {
  .invalid-feedback {
    display: block;
    color: theme-color-level("danger", 2);
  }

  .form-control,
  .custom-file-label,
  .select2-selection {
    border-color: transparent;
    box-shadow: 0 0 0 1px theme-color-level("danger", -4);  // удваивается толщина из-за background-clip
  }
}

.form-label {
  margin-top: -0.25rem;
  margin-bottom: 0.375rem;
  font-size: 0.9375rem;
  font-weight: $form-label-font-weight;
  @include media-breakpoint-up(md) {
    margin-top: .125rem;
    margin-bottom: 0.25rem;
  }

  &.col-form-label {
    @include media-breakpoint-up(md) {
      margin-bottom: 0;
    }
  }

  label {
    cursor: pointer;
    color: $form-label-color;

    .required &:after {
      content: '*';
      position: relative;
      margin-left: .125em;
      top: -0.2em;
      color: $danger;
      font-weight: bold;
    }

    &.form-check-label {
      color: $body-color;
      font-size: $font-size-base;
      line-height: $line-height-base;
    }
  }
}

.form-control {
  display: inline-block;
  vertical-align: top;
}

.related-links {
  margin: 0.5rem #{-$tool-item-margin-y} 0 #{-$tool-item-margin-y};
  @media (max-width: 479px) {
    display: block;
  }

  select + &,
  .select2 + & {
    @media (min-width: 480px) {
      margin-top: 0.3125rem;
      margin-left: 0.375rem;
    }
  }
}

.readonly-content {
  word-break: break-word;
  font-size: $font-size-lg;
}

.vHelpIcon {
  padding: 2px;
  margin-left: 6px;
  cursor: pointer;
  color: theme-color('info');
  opacity: 0.66;
  transition: opacity 0.4s;

  &:hover {
    opacity: 1;
  }
}


/**
 *  Fields
 */

.input-group {
  width: auto;

  button:not(:disabled):not(.disabled) {
    cursor: pointer;
  }

  .input-group-text {
    font-size: $font-size-lg;
    line-height: $line-height-lg;
    color: $input-group-addon-color;
    text-decoration: none;
  }

  a[href].input-group-text {
    color: $info;
  }

  button.input-group-text:hover,
  a[href].input-group-text:hover {
    color: $primary;
  }
}

.vDateField {
  display: inline-flex;
  width: $form-date-width;
  min-width: #{$form-date-width - 2 * $form-hspace};
  max-width: calc(100% - #{$form-time-width + $form-hspace});

  & ~ .vTimePicker {
    margin-left: $form-hspace;
  }
}

.vTimePicker {
  min-width: 72px;
  max-width: $form-time-width;
}

.vSmallField {
  max-width: 100%;
  @media (min-width: 420px) {
    width: $form-field-width;
  }
}

.vSelect,
.select2 {
  width: 100%;
  @media (min-width: 420px) {
    width: auto;
    min-width: $form-field-width;
  }
}

.vSelectDate {
  display: flex;

  & > .vSelect,
  & > .select2 {
    min-width: 0;

    &:nth-of-type(1) {
      width: $form-month-width;
    }

    &:nth-of-type(2) {
      width: $form-day-width;
    }

    &:nth-of-type(3) {
      width: $form-year-width;
    }

    &:not(:last-of-type) {
      margin-right: $form-hspace;
    }
  }
}

.vClearableFileField {
  .js & input[type="file"] {
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
  }

  .current-value {
    margin-right: 2em;
  }

  input[type="file"] + label {
    position: relative;
    max-width: 100%;

    .no-js & {
      display: none;
    }

    i {
      position: absolute;
      top: 0.675rem;
      left: $btn-padding-x;
    }

    span {
      display: inline-block;
      overflow: hidden;
      margin-left: 0.75rem;
      max-width: calc(100% - 0.75rem);
      white-space: nowrap;
      text-overflow: ellipsis;
      vertical-align: top;
    }

    * {
      pointer-events: none;
    }
  }

  input[type="file"].focused + label,
  input[type="file"]:focus + label {
    @if $enable-shadows {
      box-shadow: $input-box-shadow, $input-focus-box-shadow;
    } @else {
      box-shadow: $input-focus-box-shadow;
    }
  }
}

.vMultipleInput {
  li:not(:last-child) {
    margin-bottom: 6px;
  }
}

.vSplitDateTime {
  display: flex;
}


.vCustomCheckbox,
.vCustomRadio {
  padding-left: 0;
  line-height: #{$custom-checkbox-size / 1rem * 16px};

  .custom-control-input {
    top: 0;
    width: $custom-checkbox-size;
    height: $custom-checkbox-size;
  }

  .custom-control-label {
    font-size: $font-size-lg;
    cursor: pointer;

    &:empty {
      padding-left: $custom-checkbox-size;
    }
    &:not(:empty) {
      padding-left: add($custom-checkbox-size, $custom-checkbox-margin-y);
    }

    &:before,
    &:after {
      top: 0;
      left: 0;
      width: $custom-checkbox-size;
      height: $custom-checkbox-size;
    }

    &:before {
      text-align: center;
      border-radius: $border-radius;
    }
  }

  .custom-control-input:checked ~ .custom-control-label {
    &:before {
      content: '\f00c';
      font-size: subtract($custom-checkbox-size, 6px);
      line-height: subtract($custom-checkbox-size, 2px);
      font-family: FontAwesome, sans-serif;
    }
  }

  .custom-control-input:focus ~ .custom-control-label {
    &:before {
      border-color: $custom-control-indicator-focus-border-color;
    }
  }

  @each $color, $value in $theme-colors {
    input.#{$color}:checked ~ .custom-control-label:before {
      border-color: $value;
      background-color: $value;
    }
  }
}


.vCustomRadio {
  .custom-control-label {
    &:before {
      border-radius: 50%;
    }
  }
}


.custom-file-lg {
  height: $input-height-lg;

  .custom-file-input {
    height: $input-height-lg;
  }

  .custom-file-label {
    padding: $input-padding-y-lg $input-padding-x-lg;
    height: $input-height-lg;
    font-size: $font-size-lg;

    &:after {
      padding: $input-padding-y-lg $input-padding-x-lg;
      height: add($input-line-height-lg * 1em, $input-padding-y-lg * 2);
    }
  }
}
