{"version":3,"sources":["webpack:///./paper_admin/static/paper_admin/src/js/passwordform.js","webpack:///./paper_admin/static/paper_admin/src/js/components/hook_unload.js","webpack:///./paper_admin/static/paper_admin/src/js/widgets/password.js"],"names":["whenDomReady","form","document","getElementById","hookUnload","submit","formHasChanged","addEventListener","message","gettext","userActionHandler","removeEventListener","changeHandler","event","widget","target","closest","contains","window","evt","returnValue","toggler","field","input","querySelector","toggles","index","indexOf","type"],"mappings":"yFAAA,gCAKAA,aAAa,WAET,MAAMC,EAAOC,SAASC,eAAe,gBACjCF,GACAG,YAAWH,O,gCCHJ,SAASG,EAAWH,GAC/B,IAAII,GAAS,EACTC,GAAiB,EAErBL,EAAKM,iBAAiB,UAAU,WAC5BF,GAAS,KAGb,MAAMG,EAAUC,QAAQ,4BAYxB,SAASC,IACLR,SAASS,oBAAoB,UAAWD,GACxCR,SAASS,oBAAoB,YAAaD,GAC1CT,EAAKM,iBAAiB,UAAU,SAASK,EAAcC,GACnDZ,EAAKU,oBAAoB,SAAUC,GAEnC,MACME,EADSD,EAAME,OACCC,QAAQ,gBAC1BF,GAAUb,EAAKgB,SAASH,KACxBR,GAAiB,MApB7BY,OAAOX,iBAAiB,gBAAgB,SAASY,GAC7C,IAAKd,GAAUC,EAEX,OADAa,EAAIC,YAAcZ,EACXA,KAMfN,SAASK,iBAAiB,UAAWG,GACrCR,SAASK,iBAAiB,YAAaG,GAzB3C,mC,iBCAAR,SAASK,iBAAiB,SAAS,SAASM,GACxC,MACMQ,EADSR,EAAME,OACEC,QAAQ,qBAC/B,GAAIK,EAAS,CACT,MAAMC,EAAQD,EAAQL,QAAQ,gBACxBO,EAAQD,GAASA,EAAME,cAAc,SAC3C,GAAID,EAAO,CACP,MAAME,EAAU,CAAC,OAAQ,YACnBC,GAASD,EAAQE,QAAQJ,EAAMK,MAAQ,GAAK,EAClDL,EAAMK,KAAOH,EAAQC","file":"passwordform.chunk.min.js","sourcesContent":["import whenDomReady from \"when-dom-ready\";\nimport hookUnload from \"./components/hook_unload\";\nimport \"./widgets/password\";\n\n\nwhenDomReady(function() {\n    // предупреждение при закрытии формы\n    const form = document.getElementById('passwordform');\n    if (form) {\n        hookUnload(form);\n    }\n});\n","/* global gettext */\n\n/**\n * Инициализация отслеживания изменения формы и вывод\n * предупреждения при попытке закрыть страницу без сохранения.\n */\nexport default function hookUnload(form) {\n    let submit = false;\n    let formHasChanged = false;\n\n    form.addEventListener('submit', function() {\n        submit = true;\n    });\n\n    const message = gettext('You have unsaved changes');\n    window.addEventListener('beforeunload', function(evt) {\n        if (!submit && formHasChanged) {\n            evt.returnValue = message;\n            return message;\n        }\n    });\n\n    // начинаем отслеживать изменения после первого действия\n    // пользователя, чтобы игнорировать последствия инициализации\n    document.addEventListener('keydown', userActionHandler);\n    document.addEventListener('mousedown', userActionHandler);\n    function userActionHandler() {\n        document.removeEventListener('keydown', userActionHandler);\n        document.removeEventListener('mousedown', userActionHandler);\n        form.addEventListener('change', function changeHandler(event) {\n            form.removeEventListener('change', changeHandler);\n\n            const target = event.target;\n            const widget = target.closest('.form-widget');\n            if (widget && form.contains(widget)) {\n                formHasChanged = true;\n            }\n        });\n    }\n}\n","document.addEventListener('click', function(event) {\n    const target = event.target;\n    const toggler = target.closest('.vPasswordTrigger');\n    if (toggler) {\n        const field = toggler.closest('.input-group');\n        const input = field && field.querySelector('input');\n        if (input) {\n            const toggles = ['text', 'password'];\n            const index = (toggles.indexOf(input.type) + 1) % 2;\n            input.type = toggles[index];\n        }\n    }\n});\n"],"sourceRoot":""}