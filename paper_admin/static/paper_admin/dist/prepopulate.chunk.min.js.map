{"version":3,"sources":["webpack:///./paper_admin/static/paper_admin/src/js/components/prepopulate/urlify.js","webpack:///./paper_admin/static/paper_admin/src/js/components/prepopulate/prepopulate.js"],"names":["ALL_DOWNCODE_MAPS","Downcoder","map","chars","i","length","lookup","c","hasOwnProperty","k","push","regex","RegExp","join","urlify","s","num_chars","allowUnicode","slug","Initialize","replace","m","test","r","XRegExp","substring","toLowerCase","prepopulate","field","dependencies","maxLength","populate","dataset","_changed","value","values","dependency","filter","Boolean","addEventListener","forEach","dependency_field","window","django_prepopulated_fields","whenDomReady","record","document","getElementById","id","dependency_ids","classList","add","closest","dependency_list","JSON","stringify","Number","toString","emitters","inlines","on","row","prefix","querySelectorAll","parse","field_name","querySelector"],"mappings":"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","file":"prepopulate.chunk.min.js","sourcesContent":["import XRegExp from \"xregexp\";\n\n\nconst\n    LATIN_MAP = {\n        'À': 'A', 'Á': 'A', 'Â': 'A', 'Ã': 'A', 'Ä': 'A', 'Å': 'A', 'Æ': 'AE',\n        'Ç': 'C', 'È': 'E', 'É': 'E', 'Ê': 'E', 'Ë': 'E', 'Ì': 'I', 'Í': 'I',\n        'Î': 'I', 'Ï': 'I', 'Ð': 'D', 'Ñ': 'N', 'Ò': 'O', 'Ó': 'O', 'Ô': 'O',\n        'Õ': 'O', 'Ö': 'O', 'Ő': 'O', 'Ø': 'O', 'Ù': 'U', 'Ú': 'U', 'Û': 'U',\n        'Ü': 'U', 'Ű': 'U', 'Ý': 'Y', 'Þ': 'TH', 'Ÿ': 'Y', 'ß': 'ss', 'à': 'a',\n        'á': 'a', 'â': 'a', 'ã': 'a', 'ä': 'a', 'å': 'a', 'æ': 'ae', 'ç': 'c',\n        'è': 'e', 'é': 'e', 'ê': 'e', 'ë': 'e', 'ì': 'i', 'í': 'i', 'î': 'i',\n        'ï': 'i', 'ð': 'd', 'ñ': 'n', 'ò': 'o', 'ó': 'o', 'ô': 'o', 'õ': 'o',\n        'ö': 'o', 'ő': 'o', 'ø': 'o', 'ù': 'u', 'ú': 'u', 'û': 'u', 'ü': 'u',\n        'ű': 'u', 'ý': 'y', 'þ': 'th', 'ÿ': 'y'\n    },\n    LATIN_SYMBOLS_MAP = {\n        '©': '(c)'\n    },\n    GREEK_MAP = {\n        'α': 'a', 'β': 'b', 'γ': 'g', 'δ': 'd', 'ε': 'e', 'ζ': 'z', 'η': 'h',\n        'θ': '8', 'ι': 'i', 'κ': 'k', 'λ': 'l', 'μ': 'm', 'ν': 'n', 'ξ': '3',\n        'ο': 'o', 'π': 'p', 'ρ': 'r', 'σ': 's', 'τ': 't', 'υ': 'y', 'φ': 'f',\n        'χ': 'x', 'ψ': 'ps', 'ω': 'w', 'ά': 'a', 'έ': 'e', 'ί': 'i', 'ό': 'o',\n        'ύ': 'y', 'ή': 'h', 'ώ': 'w', 'ς': 's', 'ϊ': 'i', 'ΰ': 'y', 'ϋ': 'y',\n        'ΐ': 'i', 'Α': 'A', 'Β': 'B', 'Γ': 'G', 'Δ': 'D', 'Ε': 'E', 'Ζ': 'Z',\n        'Η': 'H', 'Θ': '8', 'Ι': 'I', 'Κ': 'K', 'Λ': 'L', 'Μ': 'M', 'Ν': 'N',\n        'Ξ': '3', 'Ο': 'O', 'Π': 'P', 'Ρ': 'R', 'Σ': 'S', 'Τ': 'T', 'Υ': 'Y',\n        'Φ': 'F', 'Χ': 'X', 'Ψ': 'PS', 'Ω': 'W', 'Ά': 'A', 'Έ': 'E', 'Ί': 'I',\n        'Ό': 'O', 'Ύ': 'Y', 'Ή': 'H', 'Ώ': 'W', 'Ϊ': 'I', 'Ϋ': 'Y'\n    },\n    TURKISH_MAP = {\n        'ş': 's', 'Ş': 'S', 'ı': 'i', 'İ': 'I', 'ç': 'c', 'Ç': 'C', 'ü': 'u',\n        'Ü': 'U', 'ö': 'o', 'Ö': 'O', 'ğ': 'g', 'Ğ': 'G'\n    },\n    ROMANIAN_MAP = {\n        'ă': 'a', 'î': 'i', 'ș': 's', 'ț': 't', 'â': 'a',\n        'Ă': 'A', 'Î': 'I', 'Ș': 'S', 'Ț': 'T', 'Â': 'A'\n    },\n    RUSSIAN_MAP = {\n        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',\n        'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm',\n        'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\n        'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '',\n        'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya',\n        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ё': 'Yo',\n        'Ж': 'Zh', 'З': 'Z', 'И': 'I', 'Й': 'J', 'К': 'K', 'Л': 'L', 'М': 'M',\n        'Н': 'N', 'О': 'O', 'П': 'P', 'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\n        'Ф': 'F', 'Х': 'H', 'Ц': 'C', 'Ч': 'Ch', 'Ш': 'Sh', 'Щ': 'Sh', 'Ъ': '',\n        'Ы': 'Y', 'Ь': '', 'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya'\n    },\n    UKRAINIAN_MAP = {\n        'Є': 'Ye', 'І': 'I', 'Ї': 'Yi', 'Ґ': 'G', 'є': 'ye', 'і': 'i',\n        'ї': 'yi', 'ґ': 'g'\n    },\n    CZECH_MAP = {\n        'č': 'c', 'ď': 'd', 'ě': 'e', 'ň': 'n', 'ř': 'r', 'š': 's', 'ť': 't',\n        'ů': 'u', 'ž': 'z', 'Č': 'C', 'Ď': 'D', 'Ě': 'E', 'Ň': 'N', 'Ř': 'R',\n        'Š': 'S', 'Ť': 'T', 'Ů': 'U', 'Ž': 'Z'\n    },\n    SLOVAK_MAP = {\n        'á': 'a', 'ä': 'a', 'č': 'c', 'ď': 'd', 'é': 'e', 'í': 'i', 'ľ': 'l',\n        'ĺ': 'l', 'ň': 'n', 'ó': 'o', 'ô': 'o', 'ŕ': 'r', 'š': 's', 'ť': 't',\n        'ú': 'u', 'ý': 'y', 'ž': 'z',\n        'Á': 'a', 'Ä': 'A', 'Č': 'C', 'Ď': 'D', 'É': 'E', 'Í': 'I', 'Ľ': 'L',\n        'Ĺ': 'L', 'Ň': 'N', 'Ó': 'O', 'Ô': 'O', 'Ŕ': 'R', 'Š': 'S', 'Ť': 'T',\n        'Ú': 'U', 'Ý': 'Y', 'Ž': 'Z'\n    },\n    POLISH_MAP = {\n        'ą': 'a', 'ć': 'c', 'ę': 'e', 'ł': 'l', 'ń': 'n', 'ó': 'o', 'ś': 's',\n        'ź': 'z', 'ż': 'z',\n        'Ą': 'A', 'Ć': 'C', 'Ę': 'E', 'Ł': 'L', 'Ń': 'N', 'Ó': 'O', 'Ś': 'S',\n        'Ź': 'Z', 'Ż': 'Z'\n    },\n    LATVIAN_MAP = {\n        'ā': 'a', 'č': 'c', 'ē': 'e', 'ģ': 'g', 'ī': 'i', 'ķ': 'k', 'ļ': 'l',\n        'ņ': 'n', 'š': 's', 'ū': 'u', 'ž': 'z',\n        'Ā': 'A', 'Č': 'C', 'Ē': 'E', 'Ģ': 'G', 'Ī': 'I', 'Ķ': 'K', 'Ļ': 'L',\n        'Ņ': 'N', 'Š': 'S', 'Ū': 'U', 'Ž': 'Z'\n    },\n    ARABIC_MAP = {\n        'أ': 'a', 'ب': 'b', 'ت': 't', 'ث': 'th', 'ج': 'g', 'ح': 'h', 'خ': 'kh', 'د': 'd',\n        'ذ': 'th', 'ر': 'r', 'ز': 'z', 'س': 's', 'ش': 'sh', 'ص': 's', 'ض': 'd', 'ط': 't',\n        'ظ': 'th', 'ع': 'aa', 'غ': 'gh', 'ف': 'f', 'ق': 'k', 'ك': 'k', 'ل': 'l', 'م': 'm',\n        'ن': 'n', 'ه': 'h', 'و': 'o', 'ي': 'y'\n    },\n    LITHUANIAN_MAP = {\n        'ą': 'a', 'č': 'c', 'ę': 'e', 'ė': 'e', 'į': 'i', 'š': 's', 'ų': 'u',\n        'ū': 'u', 'ž': 'z',\n        'Ą': 'A', 'Č': 'C', 'Ę': 'E', 'Ė': 'E', 'Į': 'I', 'Š': 'S', 'Ų': 'U',\n        'Ū': 'U', 'Ž': 'Z'\n    },\n    SERBIAN_MAP = {\n        'ђ': 'dj', 'ј': 'j', 'љ': 'lj', 'њ': 'nj', 'ћ': 'c', 'џ': 'dz',\n        'đ': 'dj', 'Ђ': 'Dj', 'Ј': 'j', 'Љ': 'Lj', 'Њ': 'Nj', 'Ћ': 'C',\n        'Џ': 'Dz', 'Đ': 'Dj'\n    },\n    AZERBAIJANI_MAP = {\n        'ç': 'c', 'ə': 'e', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u',\n        'Ç': 'C', 'Ə': 'E', 'Ğ': 'G', 'İ': 'I', 'Ö': 'O', 'Ş': 'S', 'Ü': 'U'\n    },\n    GEORGIAN_MAP = {\n        'ა': 'a', 'ბ': 'b', 'გ': 'g', 'დ': 'd', 'ე': 'e', 'ვ': 'v', 'ზ': 'z',\n        'თ': 't', 'ი': 'i', 'კ': 'k', 'ლ': 'l', 'მ': 'm', 'ნ': 'n', 'ო': 'o',\n        'პ': 'p', 'ჟ': 'j', 'რ': 'r', 'ს': 's', 'ტ': 't', 'უ': 'u', 'ფ': 'f',\n        'ქ': 'q', 'ღ': 'g', 'ყ': 'y', 'შ': 'sh', 'ჩ': 'ch', 'ც': 'c', 'ძ': 'dz',\n        'წ': 'w', 'ჭ': 'ch', 'ხ': 'x', 'ჯ': 'j', 'ჰ': 'h'\n    },\n    ALL_DOWNCODE_MAPS = [\n        LATIN_MAP,\n        LATIN_SYMBOLS_MAP,\n        GREEK_MAP,\n        TURKISH_MAP,\n        ROMANIAN_MAP,\n        RUSSIAN_MAP,\n        UKRAINIAN_MAP,\n        CZECH_MAP,\n        SLOVAK_MAP,\n        POLISH_MAP,\n        LATVIAN_MAP,\n        ARABIC_MAP,\n        LITHUANIAN_MAP,\n        SERBIAN_MAP,\n        AZERBAIJANI_MAP,\n        GEORGIAN_MAP\n    ];\n\n\nconst Downcoder = {\n    'Initialize': function() {\n        if (Downcoder.map) {  // already made\n            return;\n        }\n        Downcoder.map = {};\n        Downcoder.chars = [];\n        for (let i=0; i<ALL_DOWNCODE_MAPS.length; i++) {\n            const lookup = ALL_DOWNCODE_MAPS[i];\n            for (let c in lookup) {\n                if (lookup.hasOwnProperty(c)) {\n                    Downcoder.map[c] = lookup[c];\n                }\n            }\n        }\n        for (let k in Downcoder.map) {\n            if (Downcoder.map.hasOwnProperty(k)) {\n                Downcoder.chars.push(k);\n            }\n        }\n        Downcoder.regex = new RegExp(Downcoder.chars.join('|'), 'g');\n    }\n};\n\nfunction downcode(slug) {\n    Downcoder.Initialize();\n    return slug.replace(Downcoder.regex, function(m) {\n        return Downcoder.map[m];\n    });\n}\n\nexport default function urlify(s, num_chars, allowUnicode) {\n    // changes, e.g., \"Petty theft\" to \"petty-theft\"\n    // remove all these words from the string before urlifying\n    if (!allowUnicode) {\n        s = downcode(s);\n    }\n    const hasUnicodeChars = /[^\\u0000-\\u007f]/.test(s);\n    // Remove English words only if the string contains ASCII (English)\n    // characters.\n    if (!hasUnicodeChars) {\n        const removeList = [\n            \"a\", \"an\", \"as\", \"at\", \"before\", \"but\", \"by\", \"for\", \"from\",\n            \"is\", \"in\", \"into\", \"like\", \"of\", \"off\", \"on\", \"onto\", \"per\",\n            \"since\", \"than\", \"the\", \"this\", \"that\", \"to\", \"up\", \"via\",\n            \"with\"\n        ];\n        const r = new RegExp('\\\\b(' + removeList.join('|') + ')\\\\b', 'gi');\n        s = s.replace(r, '');\n    }\n    // if downcode doesn't hit, the char will be stripped here\n    if (allowUnicode) {\n        // Keep Unicode letters including both lowercase and uppercase\n        // characters, whitespace, and dash; remove other characters.\n        s = XRegExp.replace(s, XRegExp('[^-_\\\\p{L}\\\\p{N}\\\\s]', 'g'), '');\n    } else {\n        s = s.replace(/[^-\\w\\s]/g, '');  // remove unneeded chars\n    }\n    s = s.replace(/^\\s+|\\s+$/g, '');   // trim leading/trailing spaces\n    s = s.replace(/[-\\s]+/g, '-');     // convert spaces to hyphens\n    s = s.substring(0, num_chars);     // trim to first num_chars chars\n    s = s.replace(/-+$/g, '');         // trim any trailing hyphens\n    return s.toLowerCase();            // convert to lowercase\n}\n","import whenDomReady from \"when-dom-ready\";\nimport emitters from \"../emitters\";\nimport urlify from \"./urlify\";\n\n\nfunction prepopulate(field, dependencies, maxLength, allowUnicode) {\n    const populate = function() {\n        if (field.dataset._changed === '1') {\n            if (field.value) {\n                return\n            } else {\n                field.dataset._changed = '0';\n            }\n        }\n\n        const values = dependencies.map(function(dependency) {\n            return dependency.value;\n        }).filter(Boolean);\n\n        field.value = urlify(values.join(' '), maxLength, allowUnicode);\n    };\n\n    field.dataset._changed = '0';\n    field.addEventListener('change', function() {\n        field.dataset._changed = '1';\n    });\n\n    const value = field.value;\n    if (!value) {\n        dependencies.forEach(function(dependency_field) {\n            dependency_field.addEventListener('keyup', populate);\n            dependency_field.addEventListener('change', populate);\n            dependency_field.addEventListener('focus', populate);\n        });\n    }\n}\n\nif (window.django_prepopulated_fields && window.django_prepopulated_fields.length) {\n    whenDomReady(function() {\n        for (let record of window.django_prepopulated_fields) {\n            const field = document.getElementById(record.id);\n            const dependencies = record.dependency_ids.map(function(id) {\n                return document.getElementById(id);\n            }).filter(Boolean);\n\n            if (dependencies.length) {\n                field.classList.add('prepopulated-field');\n                if (field.closest('.empty-form')) {\n                    field.dataset.dependency_list = JSON.stringify(record.dependency_list);\n                    field.dataset.maxLength = record.maxLength;\n                    field.dataset.allowUnicode = Number(record.allowUnicode).toString();\n                } else {\n                    prepopulate(field, dependencies, record.maxLength, record.allowUnicode);\n                }\n            }\n        }\n    });\n\n    emitters.inlines.on('added', function(row, prefix) {\n        row.querySelectorAll('.prepopulated-field').forEach(function(field) {\n            const dependency_list = JSON.parse(field.dataset.dependency_list);\n            const dependencies = dependency_list.map(function(field_name) {\n                return row.querySelector('.field-' + field_name + ' [name$=\"-' + field_name + '\"]');\n            }).filter(Boolean);\n\n            if (dependencies.length) {\n                prepopulate(\n                    field,\n                    dependencies,\n                    Number(field.dataset.maxLength),\n                    Boolean(Number(field.dataset.allowUnicode))\n                );\n            }\n        });\n    });\n}\n"],"sourceRoot":""}