(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["passwordform"],{

/***/ "./paper_admin/static/paper_admin/src/js/components/hook_unload.js":
/*!*************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/components/hook_unload.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return hookUnload; });
/* global gettext */

/**
 * Инициализация отслеживания изменения формы и вывод
 * предупреждения при попытке закрыть страницу без сохранения.
 */
function hookUnload(form) {
  let submit = false;
  let formHasChanged = false;
  form.addEventListener('submit', function () {
    submit = true;
  });
  const message = gettext('You have unsaved changes');
  window.addEventListener('beforeunload', function (evt) {
    if (!submit && formHasChanged) {
      evt.returnValue = message;
      return message;
    }
  }); // начинаем отслеживать изменения после первого действия
  // пользователя, чтобы игнорировать последствия инициализации

  document.addEventListener('keydown', userActionHandler);
  document.addEventListener('mousedown', userActionHandler);

  function userActionHandler() {
    document.removeEventListener('keydown', userActionHandler);
    document.removeEventListener('mousedown', userActionHandler);
    form.addEventListener('change', function changeHandler(event) {
      form.removeEventListener('change', changeHandler);
      const target = event.target;
      const widget = target.closest('.form-widget');

      if (widget && form.contains(widget)) {
        formHasChanged = true;
      }
    });
  }
}

/***/ }),

/***/ "./paper_admin/static/paper_admin/src/js/passwordform.js":
/*!***************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/passwordform.js ***!
  \***************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var when_dom_ready__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! when-dom-ready */ "./node_modules/when-dom-ready/dist/index.es2015.js");
/* harmony import */ var _components_hook_unload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/hook_unload */ "./paper_admin/static/paper_admin/src/js/components/hook_unload.js");
/* harmony import */ var _widgets_password__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widgets/password */ "./paper_admin/static/paper_admin/src/js/widgets/password.js");
/* harmony import */ var _widgets_password__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_widgets_password__WEBPACK_IMPORTED_MODULE_2__);



Object(when_dom_ready__WEBPACK_IMPORTED_MODULE_0__["default"])(function () {
  // предупреждение при закрытии формы
  const form = document.getElementById('passwordform');

  if (form) {
    Object(_components_hook_unload__WEBPACK_IMPORTED_MODULE_1__["default"])(form);
  }
});

/***/ }),

/***/ "./paper_admin/static/paper_admin/src/js/widgets/password.js":
/*!*******************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/widgets/password.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

document.addEventListener('click', function (event) {
  const target = event.target;
  const toggler = target.closest('.vPasswordTrigger');

  if (toggler) {
    const field = toggler.closest('.input-group');
    const icon = field && field.querySelector('i.fa');
    const input = field && field.querySelector('input');

    if (input) {
      const classes = ['fa-eye-slash', 'fa-eye'];
      const types = ['text', 'password'];
      const index = (types.indexOf(input.type) + 1) % 2;
      input.type = types[index];
      icon.classList.add(classes[index]);
      icon.classList.remove(classes[(index + 1) % 2]);
    }
  }
});

/***/ })

}]);
//# sourceMappingURL=passwordform.chunk.min.js.map