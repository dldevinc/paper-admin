# Generated by Django 3.2.18 on 2023-04-26 16:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Sigleton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
            ],
            options={
                'verbose_name': 'singleton',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Tag',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Widgets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_boolean', models.BooleanField(default=False, help_text='Standard boolean field', verbose_name='boolean')),
                ('f_switch', models.BooleanField(default=False, help_text='Boolean field with <code>AdminSwitchInput</code> widget', verbose_name='switch')),
                ('f_small_int', models.SmallIntegerField(default=0, help_text='Standard <code>SmallIntegerField</code>', verbose_name='small integer')),
                ('f_int', models.IntegerField(default=0, help_text='Standard <code>IntegerField</code>', verbose_name='integer')),
                ('f_bigint', models.BigIntegerField(default=0, help_text='Standard <code>BigIntegerField</code>', verbose_name='big integer')),
                ('f_float', models.FloatField(default=0, help_text='Standard <code>FloatField</code>', verbose_name='float')),
                ('f_decimal', models.DecimalField(decimal_places=2, default=0, help_text='Standard <code>DecimalField</code>', max_digits=16, verbose_name='decimal')),
                ('f_choices', models.SmallIntegerField(choices=[(1, 'One'), (2, 'Two'), (3, 'Three'), (4, 'Four')], default=1, help_text='Integer choices', verbose_name='choices')),
                ('f_radio_choices', models.SmallIntegerField(choices=[(1, 'One'), (2, 'Two'), (3, 'Three'), (4, 'Four')], default=1, help_text='Radio choices', verbose_name='Radio choices')),
                ('f_date', models.DateField(blank=True, help_text='Standard <code>DateField</code>', null=True, verbose_name='date')),
                ('f_select_date', models.DateField(blank=True, help_text='<code>DateField</code> with <code>SelectDateWidget</code>', null=True, verbose_name='date selects')),
                ('f_time', models.TimeField(blank=True, help_text='Standard <code>TimeField</code>', null=True, verbose_name='time')),
                ('f_datetime', models.DateTimeField(blank=True, help_text='Standard <code>DateTimeField</code>', null=True, verbose_name='datetime')),
                ('f_duration', models.DurationField(blank=True, help_text='Standard <code>DurationField</code>', null=True, verbose_name='duration')),
                ('f_char', models.CharField(blank=True, help_text='Standard <code>CharField</code>', max_length=128, verbose_name='char')),
                ('f_slug', models.SlugField(blank=True, help_text='Standard <code>SlugField</code>', max_length=128, verbose_name='slug')),
                ('f_email', models.EmailField(blank=True, help_text='Standard <code>EmailField</code>', max_length=254, verbose_name='email')),
                ('f_password', models.CharField(blank=True, help_text='<code>CharField</code> with <code>PasswordInput</code>', max_length=128, verbose_name='password')),
                ('f_ip', models.GenericIPAddressField(blank=True, help_text='Standard <code>GenericIPAddressField</code>', null=True, verbose_name='IP')),
                ('f_text', models.TextField(blank=True, help_text='Standard <code>TextField</code>', verbose_name='text')),
                ('f_url', models.URLField(blank=True, help_text='Standard <code>URLField</code>', verbose_name='URL')),
                ('f_uuid', models.UUIDField(blank=True, help_text='Standard <code>UUIDField</code>', null=True, verbose_name='UUID')),
                ('f_filepath', models.FilePathField(blank=True, help_text='Standard <code>FilePathField</code>', path='/home/jon/Python/www/paper-admin/tests/app', verbose_name='filepath')),
                ('f_file', models.FileField(blank=True, help_text='Standard <code>FileField</code>', upload_to='widgets', verbose_name='file')),
                ('f_file_input', models.FileField(blank=True, help_text='<code>FileField</code> with <code>FileInput</code>', upload_to='widgets', verbose_name='file input')),
                ('f_image', models.ImageField(blank=True, help_text='Standard <code>ImageField</code>', upload_to='widgets', verbose_name='image')),
                ('f_char_ro', models.CharField(blank=True, default='Default value', help_text='Read-only <code>CharField</code>', max_length=128, verbose_name='char')),
                ('f_int_ro', models.IntegerField(default=42, help_text='Read-only <code>IntegerField</code>', verbose_name='int')),
                ('f_text_ro', models.TextField(blank=True, default='In hac habitasse platea dictumst. Curabitur nisi. Phasellus accumsan cursus velit. Suspendisse enim turpis, dictum sed, iaculis a, condimentum nec, nisi.', help_text='Read-only <code>TextField</code>', verbose_name='text')),
                ('f_hidden', models.CharField(blank=True, help_text='Hidden <code>CharField</code>', max_length=128, verbose_name='hidden')),
                ('dal_fk', models.ForeignKey(blank=True, help_text='DAL <code>ManyToManyField</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='FK')),
                ('dal_m2m', models.ManyToManyField(blank=True, help_text='DAL <code>ManyToManyField</code>', related_name='_app_widgets_dal_m2m_+', to='app.Tag', verbose_name='M2M')),
                ('f_ac_fk', models.ForeignKey(blank=True, help_text='Autocomplete <code>ForeignKey</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='Autocomplete FK')),
                ('f_ac_m2m', models.ManyToManyField(blank=True, help_text='Autocomplete <code>ManyToManyField</code>', related_name='_app_widgets_f_ac_m2m_+', to='app.Tag', verbose_name='Autocomplete M2M')),
                ('f_ac_o2o', models.OneToOneField(blank=True, help_text='Autocomplete <code>OneToOneField</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='Autocomplete One-to-One')),
                ('f_checkbox_m2m', models.ManyToManyField(blank=True, help_text='<code>ManyToManyField</code> with <code>AdminCheckboxSelectMultiple</code>', related_name='_app_widgets_f_checkbox_m2m_+', to='app.Tag', verbose_name='Checkbox M2M')),
                ('f_fk', models.ForeignKey(blank=True, help_text='Standard <code>ForeignKey</code>', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='app.tag', verbose_name='FK')),
                ('f_horizontal_m2m', models.ManyToManyField(blank=True, help_text='Horizontal <code>ManyToManyField</code>', related_name='_app_widgets_f_horizontal_m2m_+', to='app.Tag', verbose_name='Horizontal M2M')),
                ('f_m2m', models.ManyToManyField(blank=True, help_text='Standard <code>ManyToManyField</code>', related_name='_app_widgets_f_m2m_+', to='app.Tag', verbose_name='M2M')),
                ('f_o2o', models.OneToOneField(blank=True, help_text='Standard <code>OneToOneField</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='One-to-One')),
                ('f_radio_fk', models.ForeignKey(blank=True, help_text='Radio <code>ForeignKey</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='Radio FK')),
                ('f_radio_m2m', models.ManyToManyField(blank=True, help_text='Raw ID <code>ManyToManyField</code>', related_name='_app_widgets_f_radio_m2m_+', to='app.Tag', verbose_name='Radio M2M')),
                ('f_raw_id_fk', models.ForeignKey(blank=True, help_text='Raw ID <code>ForeignKey</code>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='app.tag', verbose_name='Raw ID FK')),
            ],
            options={
                'verbose_name': 'widgets',
                'verbose_name_plural': 'widgets',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('text', models.TextField()),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.book')),
            ],
        ),
        migrations.CreateModel(
            name='MPTTTree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Lorem ipsum <b>dolor</b> sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua', max_length=128, verbose_name='name')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='app.mptttree')),
            ],
            options={
                'verbose_name': 'MPTT',
                'verbose_name_plural': 'MPTT',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('video', 'Video')], default='text', max_length=10)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='app.group')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='app.user')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, to='app.User'),
        ),
        migrations.CreateModel(
            name='DjangoTreeQueriesNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Lorem ipsum <b>dolor</b> sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua', max_length=128, verbose_name='name')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='app.djangotreequeriesnode', verbose_name='parent')),
            ],
            options={
                'verbose_name': 'Django Tree Queries',
                'verbose_name_plural': 'Django Tree Queries',
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.book')),
            ],
            options={
                'verbose_name': 'Author',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='authors',
            field=models.ManyToManyField(through='app.BookAuthor', to='app.Author'),
        ),
    ]
